{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Working with APIs",
  "steps": [
    {
      "title": "What You'll Learn",
      "description": "## What you'll learn\n\nSo far you've:\n\n* Created and toured an Auth0 tenant\n* Spun up a regular web application\n* Added secure authentication to your application using Auth0\n* Explored and enabled social connections for your application\n* Created edited and manipulated user profiles\n* Customized the New and Classic login experiences\n\n**Here's what you'll do now:**  \n\n1. Create an API in your Tenant\n1. Deploy a test API into the lab environment\n1. Obtain a test Access Token\n1. Call the test API using the Access Token"
    },
    {
      "title": "Configure Your API in Auth0",
      "description": "## 1. Configure your API in Auth0\n\n1. In the Auth0 Dashboard, go to the [APIs page](https://manage.auth0.com/#/apis), and click the **Create API** button.  \n\n1. Name it **Expenses API**. Since this API will handle the expenses for our application, we recommend ‚Äòexpenses-api‚Äô.  \n\n1. For the **Identifier** field, copy and paste <https://expenses-api> and click **Create**.  \n\n4. Click the **Permissions** tab and add a new permission called read:reports with a suitable description. This custom permission is the one you will use to determine whether the client is authorized to retrieve expenses.  \n\nExcellent. Your API is registered with Auth0."
    },
    {
      "title": "Check the 'src' Folder",
      "description": "## Check the 'src' Folder\nIf you examine the Explorer pane you'll notice that we've added a new folder in addition to the web-app folder from previous labs. \n\nUp until this point, the expenses that your web-application displays to users have been hard-coded into the application. We're going to change that.\n\nIn the src folder, you'll now see an 'api' folder containing an entirely different application -- Our new API! \n\nThe first step will be wiring these two applications together. But, before we do that, let's take a quick look at the Expenses API code."
    },
    {
      "title": "Explore the Expenses API",
      "description": "In this (and a few yet-to-be-added steps) we'll walk the learner through the important elements of the code for the Expenses API."
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Add the Axios Library to the Expenses Web Application\nNow that you're familiar with the Expenses API, our first task is to require the Axios library in our web application. This library will enable our asynchronous calls to the Expenses API application. Start by inserting the following code into the Expenses Web Application to require Axios:\n\n``` jsx\n\nconst axios = require(\"axios\").default;\n```\n\n\nWith that done, it's time to begin modifying our routes to use Axios to call our API, rather than simply displaying data from the Application file. ",
      "line": 9,
      "selection": {
        "start": {
          "line": 8,
          "character": 66
        },
        "end": {
          "line": 8,
          "character": 66
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## First, Modify the Default Route\nThe default route (\"/\") is the view that anonymous users will see by default when they first encounter our Expenses Web Application. \n\nRight now, the route is referencing values that are hard-coded into the web application. Now, we'll adjust this route to retrieve data from our Expenses API using Axios. We'll also add some error handling. \n\nExamine the code below, and compare it to the code that is already in the application. When you've identified the changes, click Insert Code to replace the old code with the block below.\n\n``` jsx\napp.get(\"/\", async (req, res, next) => {\n    try {\n       const summary = await axios.get(`${API_URL}/total`);\n       res.render(\"home\", {\n        user: req.oidc && req.oidc.user,\n        total: summary.data.total,\n        count: summary.data.count,\n       });\n    } catch (err) {\n       next(err);\n    }\n});\n```\n, then continue to modify the expenses route.",
      "line": 69,
      "selection": {
        "start": {
          "line": 63,
          "character": 1
        },
        "end": {
          "line": 69,
          "character": 4
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Modify the Expenses Route\n\nNow we'll modify the \"/expenses\" route in a similar way. Compare the block below to what's currently in the code. As before, we're adding error handling, and defining the path to the relevant data in our Expenses API.\n\n``` jsx\napp.get(\"/expenses\", requiresAuth(), async (req, res, next) => {\n    try {\n        const expenses = await axios.get(`${API_URL}/reports`);\n        res.render(\"expenses\", {\n           user: req.oidc && req.oidc.user,\n           expenses: expenses.data,\n        });\n    } catch (err) {\n        next(err);\n    }\n});\n```\n, then continue to the next step.",
      "line": 90,
      "selection": {
        "start": {
          "line": 85,
          "character": 1
        },
        "end": {
          "line": 90,
          "character": 4
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Remove the Hard-Coded Expenses Data from the Expenses Web Application\nNow that we've successfully wired our Expenses Web Application to our Expenses API, there's no need to hang on to the hard-coded expense data. Let's remove this data from our Web Application to keep things clean.\n\nClick the Insert Code button below to remove the data automatically.\n\n``` jsx \n \n```\n -- continue when you're ready!",
      "line": 61,
      "selection": {
        "start": {
          "line": 48,
          "character": 3
        },
        "end": {
          "line": 61,
          "character": 3
        }
      }
    },
    {
      "title": "Run the Application and API",
      "description": "## Run the Application and API\nNow that we've connected the Expenses Web Application to our Expenses API, let's run them both and take a look. \n\n1. From the top of the Run and Debug tab in Visual Studio Code, select 'Launch All' from the dropdown, then click the play icon. \n1. Your terminal will do some work, then provide a URL for the Expenses Web Application. Visit the Application and log in with the account you created in the 'Create an Application' Lab. \n\nWhile we've successfully wired our API up, it isn't yet secure. You can see this directly by appending the URL for your Expenses API with /reports. \n\nThe expense data is available publicly, without an Access Token. The next steps will change the API to require a properly-scoped Access Token to view.\n\nTo do this, we‚Äôll make use of an Express authentication middleware used to protect OAuth2 resources, which validates access tokens.  \n\nIt's time to make some adjustments to our Expenses API.\n\nWhen you've finished exploring the running applications, click next and we'll secure our API."
    },
    {
      "file": "src/api/api/index.js",
      "description": "## Add the Express OAuth2 Bearer Node Module\nThe first step in securing our API, is to require the Express middleware we'll use to do so. \n\nNote that we're no longer working in the Web-App folder. This index.js file is the code for our Expenses API.\n\nLet's add the necessary Express middleware here with the following code:\n\n``` jsx\nconst { auth } = require(\"express-oauth2-bearer\");\n```\n, then proceed to the next step.\n",
      "line": 4,
      "selection": {
        "start": {
          "line": 4,
          "character": 1
        },
        "end": {
          "line": 4,
          "character": 57
        }
      }
    },
    {
      "file": "src/api/api/index.js",
      "description": "## Configure the API to use the Authentication Middleware\nNow, let's configure the API to use the middleware for all requests. \n\nHere, we'll addt the following code:\n\n``` jsx\n// üëÜ public routes above üëÜ\napp.use(auth());\n// üëá private routes below üëá\n```\n\nNote the placement of this middleware between the ‚Äú/total‚Äù and ‚Äú/reports‚Äù endpoints. This is significant. \n\nJust like with web applications, some API endpoints are public. Endpoints above the middleware are open to the public while endpoints below require a valid oauth2 Access Token.  ",
      "line": 52,
      "selection": {
        "start": {
          "line": 50,
          "character": 1
        },
        "end": {
          "line": 50,
          "character": 29
        }
      }
    },
    {
      "title": "API Secured!",
      "description": "## API Secured!\nNice work! \n\nWe‚Äôve now set the Expenses API up with express middleware that will require an authorization token before letting anyone view expenses data.\n\nLet's try it out!"
    },
    {
      "title": "Call the Secured API Without an Access Token",
      "description": "## Call the Secured API Without an Access Token\n\nThe next time you log in to your web application and attempt to navigate to the expenses, you‚Äôll receive a 401 error.  \n\n![](https://cdn.auth0.com/website/training/example/A0FUN-M06-L01/img-4.png)\n\nThis is expected. The web app is making a call to the API that it is not authorized to access.\n\nNotice that the home page does not throw an error. This is because we left the ‚Äú/total‚Äù endpoint of the expenses API open to the public. So the web app can still call it to show summary information.\n\nSimilarly, if you attempt to navigate directly to the ‚Äú/reports‚Äù endpoint of the API, you‚Äôll receive an ‚ÄòUnauthorized‚Äô error.  \n  \n![](https://cdn.auth0.com/website/training/example/A0FUN-M06-L01/img-14.png)\n\nThis is because we‚Äôve successfully secured the API. Now anyone or any application that wishes to consume the ‚Äú/reports‚Äù endpoint _must_ have a valid Access Token.\n\nAll requests that do not include a valid Access Token (expired token, incorrect scopes, etc.) will return an error instead of the desired data."
    },
    {
      "title": "Add the Client Secret to Your Environment",
      "description": "## 8. Add the Client Secret to Your Environment\n\nNow let‚Äôs use an Access Token to call the Expenses API.\n\nCurrently, the regular web application is set up to do authentication based on the OpenID Connect standard. To access a secured resource like the expenses API, you need an Access Token. This will require the application to communicate with the token endpoint on the authorization server.\n\nTo accomplish this, the regular web application will use the Authorization Code Flow. This flow requires full client credentials from a calling application. At this point, we only have the client id.\n\n1. In the Auth0 Dashboard, go to the [Applications page](https://manage.auth0.com/#/applications), and click **Expenses Web Application** in the list of applications.  \n\n1. On the **Settings** tab, click the copy button for the **Client Secret**.  \n\n    ![](https://cdn.auth0.com/website/training/example/A0FUN-M06-L01/img-1.png)  \n"
    },
    {
      "title": "**** Add to environment here, or at the start of the lab? ",
      "description": "\n1. Add a new environment variable (plain text) named **CLIENT_SECRET** with the value set to the client secret you just copied.\n\nThis environment variable will now be available to the web app after the next deployment.  \n\nThe middleware needs to be initialized with some information to build a proper OpenID request and send it to the authorization server using the Authorization Code Flow.  \n\n* **clientSecret:** This is created on the authorization server along with the client id and is a unique string that is used to authenticate your application. This secret must be provided in each request so the authorization when requesting access tokens.  \n\n        Can be obtained directly from the **CLIENT_SECRET** environment variable.  \n\n    * **response_type:** This defines the type of response we want to get back from the authorization endpoint. By default, we have been using a response type of **id_token**.  \n\n        Using the Authorization Code Flow, we need to tell the authorization server we expect back an authorization **code**.  \n\n    * **audience:** This specifies the resource we want to gain access to. In this case the Expenses API, so we will use the audience we defined for the Expenses API.  \n"
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Configure the Expenses Web Application to Request a Token\n\nThe following code will update the auth middleware in our Expenses Web Application to use request an access token for the Expenses API.\n\n``` jsx\n\nauthorizationParams: {\n    response_type: \"code id_token\",\n    audience: \"https://expenses-api\",\n    },\n```\n\n\nThe **authorizationParams** key allows us to supply OAuth 2 specific request values. We will be returning to this in the future to add more values.",
      "line": 50,
      "selection": {
        "start": {
          "line": 46,
          "character": 25
        },
        "end": {
          "line": 46,
          "character": 25
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Configure the Reports Endpoint to Use the Access Token\n\nNext, we'll update the call to the reports endpoint of the Expenses API in the expenses route to use the Access Token to authorize the request.\n\nTo do this, we‚Äôll first get the current Access Token from the request session. Then, we‚Äôll use it in the authorization header of the Axios request.\n\nCompare the code below to what's already in the expenses route. When you've identified the changes, select Insert Code to replace the current block.\n\n```jsx\napp.get(\"/expenses\", requiresAuth(), async (req, res, next) => {\n    try {\n       // üëá get the token from the request üëá\n       const { token_type, access_token } = req.oidc.accessToken;\n       // üëá then send it as an authorization header üëá\n       const expenses = await axios.get(`${API_URL}/reports`, {\n         headers: {\n           Authorization: `${token_type} ${access_token}`,\n         },\n       });\n       // üëÜ end of changes üëÜ\n       res.render(\"expenses\", {\n        user: req.oidc && req.oidc.user,\n        expenses: expenses.data,\n    });\n    } catch (err) {\n       next(err);\n    }\n});\n```",
      "line": 86,
      "selection": {
        "start": {
          "line": 76,
          "character": 1
        },
        "end": {
          "line": 86,
          "character": 4
        }
      }
    },
    {
      "title": "Nice Work!",
      "description": "## Nice Work!\nThe next time you log in to your web application and attempt to navigate to the expenses, you will see the list of expenses without error. (Be sure that you log out of the app completely before logging back in)"
    }
  ],
  "ref": "core-codetour-steps",
  "description": "Secure an API",
  "line": 46,
  "selection": {
    "start": {
      "line": 46,
      "character": 15
    },
    "end": {
      "line": 46,
      "character": 15
    }
  }
}